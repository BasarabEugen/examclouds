Создать класс User, содержащий private переменные login, password. Создать внутренний класс Query в классе User. Класс Query содержит метод printToLog(), который распечатывает на консоль сообщение о том что пользователь с таким то логином и паролем отправил запрос. Класс User, содержит метод createQuery(), в котором создается объект класса Query и вызывается метод printToLog(). В методе main(): создать экземпляр класса User и вызвать метод createQuery(); создать экземпляр класса Query и вызвать метод printToLog() используя конструкцию user.new Query(); создать экземпляр класса Query и вызвать метод printToLog() используя конструкцию new User().new Query(); (Задание с урока)

Переписать предыдущее задание, используя локальный класс. (Задание с урока)

Переписать класс Query используя статический класс. (Задание с урока)


Создать анонимный класс расширяющий интерфейс Printable. Вызвать его метод print().(Задание с урока)

Создать интерфейс Cookable, содержащий метод void cook(). Создать класс Food, содержащий метод public void prepare(Cookable c) { c.cook(); } Создать экземпляр класса Food и вызвать его метод prepare(). На вход метода prepare() передать экземпляр анонимного класса, расширяющего интерфейс Cookable.

Переделать класс Food используя лямбда выражения.  (Задание с урока)

Создать лямбда выражение, которое возвращает значение true, если строка не null, используя функциональный интерфейс Predicate.  (Задание с урока)

Создать лямбда выражение, которое проверяет, что строка не пуста, используя функциональный интерфейс Predicate.  (Задание с урока)

Написать программу проверяющую, что строка не null и не пуста, используя метод and() функционального интерфейса Predicate.  (Задание с урока)

Написать программу которая проверяет, что строка начинается буквой “J”или “N” и заканчивается “A”. Используем функциональный интерфейс Predicate. (Задание с урока)

Написать лямбда выражение, которое принимает на вход объект типа HeavyBox и выводит на консоль сообщение “Отгрузили ящик с весом n”. “Отправляем ящик с весом n” Используем функциональный интерфейс Consumer и метод по умолчанию andThen. (Задание с урока)

Написать лямбда выражение, которое преобразует строку к числу, если строка не может быть преобразована корректно, вернуть значение 0. Используем функциональный интерфейс Function. (Задание с урока)

Написать лямбда выражение, которое возвращает случайное число от 0 до 10. Используем функциональный интерфейс Supplier. (Задание с урока)

Перепишите используя method references:
IntFunction<String> function = i -> String.valueOf(i);
System.out.println(function.apply(450));​
(Задание с урока)

Переделать класс Food используя ссылку на статический метод. (Задание с урока)

Перепишите используя method references:
Supplier<String> newString = () -> new String();
System.out.println(newString.get());​
(Задание с урока)

Внутренние классы - вопросы и задания